name: Compile examples

# on:
#   push:
#     paths-ignore:
#       - '.github/workflows/cpp_lint.yml'
#       - '.github/workflows/compile_library.yml'
#   pull_request:
#     paths-ignore:
#       - '.github/workflows/cpp_lint.yml'
#       - '.github/workflows/compile_library.yml'

jobs:
  esp8266:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        example: 
        - "examples/simpleServer/simpleServer.ino"
        - "examples/customOptions/customOptions.ino"
        - "examples/customHTML/customHTML.ino"
        - "examples/gpio_list/gpio_list.ino"
        - "examples/handleFormData/handleFormData.ino"
        - "examples/highcharts/highcharts.ino"
        - "examples/remoteOTA/remoteOTA.ino"
        - "examples/withWebSocket/withWebSocket.ino"

    steps:
    - uses: actions/checkout@v2
    - name: Cache pip
      uses: actions/cache@v2
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: ${{ runner.os }}-pip-
    - name: Cache PlatformIO
      uses: actions/cache@v2
      with:
        path: ~/.platformio
        key: ${{ runner.os }}-${{ hashFiles('**/lockfiles') }}
    - name: Set up Python
      uses: actions/setup-python@v2
    - name: Install PlatformIO
      run: |
        python -m pip install --upgrade pip
        pip install --upgrade platformio
    - name: Install 3rd party dependecies
      run: | 
        pio lib -g install bblanchon/ArduinoJson@6.21.5 \
        https://github.com/cotestatnt/async-esp-fs-webserver.git
        
    - name: Run PlatformIO Examples
      run: |
        pio ci --board=nodemcuv2 \
        --lib=examples/customHTML/**.h \
        --lib=examples/withWebSocket/**.h 
      env:
        PLATFORMIO_CI_SRC: ${{ matrix.example }}

  esp32:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        example: 
        - "examples/simpleServer/simpleServer.ino"
        - "examples/customOptions/customOptions.ino"
        - "examples/customHTML/customHTML.ino"
        - "examples/gpio_list/gpio_list.ino"
        - "examples/handleFormData/handleFormData.ino"
        - "examples/highcharts/highcharts.ino"
        - "examples/remoteOTA/remoteOTA.ino"
        - "examples/withWebSocket/withWebSocket.ino"
        - "examples/esp32-cam/esp32-cam.ino"
                
    steps:
    - uses: actions/checkout@v2
    - name: Cache pip
      uses: actions/cache@v2
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: ${{ runner.os }}-pip-
    - name: Cache PlatformIO
      uses: actions/cache@v2
      with:
        path: ~/.platformio
        key: ${{ runner.os }}-${{ hashFiles('**/lockfiles') }}
    - name: Set up Python
      uses: actions/setup-python@v2
    - name: Install PlatformIO
      run: |
        python -m pip install --upgrade pip
        pip install --upgrade platformio
    - name: Install 3rd party dependecies
      run: | 
        pio lib -g install bblanchon/ArduinoJson@6.21.5 \
        https://github.com/cotestatnt/async-esp-fs-webserver.git
       
    - name: Run PlatformIO Examples
      run: |
        pio ci --board=esp32dev \
        --lib=examples/customHTML/**.h \
        --lib=examples/withWebSocket/**.h \
        --lib=examples/esp32-cam/**.h 
      env:
        PLATFORMIO_CI_SRC: ${{ matrix.example }}
